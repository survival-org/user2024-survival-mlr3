[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "",
    "text": "Teaching Aims\n\n\n\n\nUnderstand how {mlr3} is structured (Lang et al. 2019)\nAccess learners and (built-in) tasks\n\n\n\nTo get started, we load {mlr3verse}, which will load various packages from the {mlr3} ecosystem:\n\n\nCode\nlibrary(mlr3verse)\n\n\n{mlr3} ships with wrappers for many commonly used machine learning algorithms (“learners”).\nWe can access the list of available learners using the mlr_learners dictionary:\n\n\nCode\nsample(mlr_learners$keys(), 10)\n\n\n [1] \"regr.rvm\"         \"surv.obliqueRSF\"  \"classif.logistic\" \"classif.kknn\"    \n [5] \"classif.ctree\"    \"regr.cubist\"      \"surv.glmboost\"    \"surv.ctree\"      \n [9] \"classif.OneR\"     \"regr.rpart\"      \n\n\nOne example:\n\n\nCode\nlrn(\"classif.ranger\")\n\n\n&lt;LearnerClassifRanger:classif.ranger&gt;: Random Forest\n* Model: -\n* Parameters: num.threads=1\n* Packages: mlr3, mlr3learners, ranger\n* Predict Types:  [response], prob\n* Feature Types: logical, integer, numeric, character, factor, ordered\n* Properties: hotstart_backward, importance, multiclass, oob_error,\n  twoclass, weights\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse lrn(\"classif.ranger\")$help() to view the help page, with links to documentation for parameters and other information about the wrapped learner.\n\n\nBuilt-in tasks can be accessed using the mlr_tasks dictionary:\n\n\nCode\nhead(as.data.table(mlr_tasks)[, list(key, label, task_type, nrow, ncol, properties)])\n\n\nKey: &lt;key&gt;\n              key                     label task_type  nrow  ncol properties\n           &lt;char&gt;                    &lt;char&gt;    &lt;char&gt; &lt;int&gt; &lt;int&gt;     &lt;list&gt;\n1:   ames_housing          Ames House Sales      regr  2930    82           \n2:   bike_sharing       Bike Sharing Demand      regr 17379    14           \n3: boston_housing     Boston Housing Prices      regr   506    18           \n4:  breast_cancer   Wisconsin Breast Cancer   classif   683    10   twoclass\n5:  german_credit             German Credit   classif  1000    21   twoclass\n6:           ilpd Indian Liver Patient Data   classif   583    11   twoclass\n\n\nOne example:\n\n\nCode\ntsk(\"penguins_simple\")\n\n\n&lt;TaskClassif:penguins&gt; (333 x 11): Simplified Palmer Penguins\n* Target: species\n* Properties: multiclass\n* Features (10):\n  - dbl (7): bill_depth, bill_length, island.Biscoe, island.Dream,\n    island.Torgersen, sex.female, sex.male\n  - int (3): body_mass, flipper_length, year\n\n\n\n\n\n\n\n\nNote\n\n\n\nTasks encapsulate a data source (typically a data.table) and additional information regarding which variables are considered features and target. Tasks can also specify additional properties such as stratification, which we will see later."
  },
  {
    "objectID": "index.html#mlr3-basics",
    "href": "index.html#mlr3-basics",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "",
    "text": "Teaching Aims\n\n\n\n\nUnderstand how {mlr3} is structured (Lang et al. 2019)\nAccess learners and (built-in) tasks\n\n\n\nTo get started, we load {mlr3verse}, which will load various packages from the {mlr3} ecosystem:\n\n\nCode\nlibrary(mlr3verse)\n\n\n{mlr3} ships with wrappers for many commonly used machine learning algorithms (“learners”).\nWe can access the list of available learners using the mlr_learners dictionary:\n\n\nCode\nsample(mlr_learners$keys(), 10)\n\n\n [1] \"regr.rvm\"         \"surv.obliqueRSF\"  \"classif.logistic\" \"classif.kknn\"    \n [5] \"classif.ctree\"    \"regr.cubist\"      \"surv.glmboost\"    \"surv.ctree\"      \n [9] \"classif.OneR\"     \"regr.rpart\"      \n\n\nOne example:\n\n\nCode\nlrn(\"classif.ranger\")\n\n\n&lt;LearnerClassifRanger:classif.ranger&gt;: Random Forest\n* Model: -\n* Parameters: num.threads=1\n* Packages: mlr3, mlr3learners, ranger\n* Predict Types:  [response], prob\n* Feature Types: logical, integer, numeric, character, factor, ordered\n* Properties: hotstart_backward, importance, multiclass, oob_error,\n  twoclass, weights\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse lrn(\"classif.ranger\")$help() to view the help page, with links to documentation for parameters and other information about the wrapped learner.\n\n\nBuilt-in tasks can be accessed using the mlr_tasks dictionary:\n\n\nCode\nhead(as.data.table(mlr_tasks)[, list(key, label, task_type, nrow, ncol, properties)])\n\n\nKey: &lt;key&gt;\n              key                     label task_type  nrow  ncol properties\n           &lt;char&gt;                    &lt;char&gt;    &lt;char&gt; &lt;int&gt; &lt;int&gt;     &lt;list&gt;\n1:   ames_housing          Ames House Sales      regr  2930    82           \n2:   bike_sharing       Bike Sharing Demand      regr 17379    14           \n3: boston_housing     Boston Housing Prices      regr   506    18           \n4:  breast_cancer   Wisconsin Breast Cancer   classif   683    10   twoclass\n5:  german_credit             German Credit   classif  1000    21   twoclass\n6:           ilpd Indian Liver Patient Data   classif   583    11   twoclass\n\n\nOne example:\n\n\nCode\ntsk(\"penguins_simple\")\n\n\n&lt;TaskClassif:penguins&gt; (333 x 11): Simplified Palmer Penguins\n* Target: species\n* Properties: multiclass\n* Features (10):\n  - dbl (7): bill_depth, bill_length, island.Biscoe, island.Dream,\n    island.Torgersen, sex.female, sex.male\n  - int (3): body_mass, flipper_length, year\n\n\n\n\n\n\n\n\nNote\n\n\n\nTasks encapsulate a data source (typically a data.table) and additional information regarding which variables are considered features and target. Tasks can also specify additional properties such as stratification, which we will see later."
  },
  {
    "objectID": "index.html#example-train-predict-evaluate",
    "href": "index.html#example-train-predict-evaluate",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "Example: Train-Predict-Evaluate",
    "text": "Example: Train-Predict-Evaluate\n\n\n\n\n\n\nTeaching Aims\n\n\n\n\nPerform a simple train-predict-evaluate step\nUse built-in classification task and learner\n\n\n\nThe below code snippet trains a random forest model on the penguins_simple task (a simplified version of the palmerpenguins dataset, but without missing values) and evaluates the model’s performance using the classification error metric:\n\n\nCode\ntask = tsk(\"penguins_simple\")\nlearner = lrn(\"classif.ranger\", num.trees = 10)\n\npart = partition(task, ratio = 0.8) # by default stratifies on the target column\n\nlearner$train(task, row_ids = part$train)\npreds = learner$predict(task, row_ids = part$test)\npreds$score(msr(\"classif.ce\"))\n\n\nclassif.ce \n0.01492537 \n\n\nLearn more by reading the respective chapter on the mlr3 book."
  },
  {
    "objectID": "index.html#mlr3proba-basics",
    "href": "index.html#mlr3proba-basics",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "mlr3proba: Basics",
    "text": "mlr3proba: Basics\n\n\n\n\n\n\nTeaching Aims\n\n\n\n\nUnderstand survival tasks and how they differ from regression/classification\nKnow how to conduct basic modeling with {mlr3proba} (Sonabend et al. 2021)\nPrediction types\nSurvival measures\n\n\n\n{mlr3proba} extends {mlr3} with survival analysis capabilities.\n\n\n\n\n\n\nImportant\n\n\n\nAs of now, {mlr3proba} is not on CRAN, but you can install it from GitHub or r-universe. More info is also available on the respective mlr3 book chapter.\n\n\n\nSurvival Tasks\nWe’ll start by using the built-in lung dataset, which is a survival task with 7 features and 168 observations:\n\n\nCode\nlibrary(mlr3proba)\ntask = tsk(\"lung\")\n\ntask\n\n\n&lt;TaskSurv:lung&gt; (168 x 9): Lung Cancer\n* Target: time, status\n* Properties: -\n* Features (7):\n  - int (6): age, meal.cal, pat.karno, ph.ecog, ph.karno, wt.loss\n  - fct (1): sex\n\n\nSee online reference to useful methods offered by the main TaskSurv class. Some examples:\nTarget Surv object from {survival} (+ denotes censored observation):\n\n\nCode\nhead(task$truth())\n\n\n[1]  455   210  1022+  310   361   218 \n\n\nProportion of censored observations:\n\n\nCode\ntask$cens_prop()\n\n\n[1] 0.2797619\n\n\nDoes the data satisfy the proportional hazards assumption? Get the p-value from the Grambsch-Therneau test (see ?survival::cox.zph (Grambsch and Therneau 1994)):\n\n\nCode\ntask$prop_haz() # barely, p &gt; 0.05 =&gt; PH\n\n\n[1] 0.0608371\n\n\nUsing the autoplot() function from {ggplot2}, we get the Kaplan-Meier curve:\n\n\nCode\nlibrary(ggplot2)\nautoplot(task) +\n  labs(title = \"Lung dataset: Kaplan-Meier curve\")\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\n\n\n\n\n\n\n\nTasks shipped with {mlr3proba}:\n\n\nCode\nas.data.table(mlr_tasks)[task_type == \"surv\", list(key, label, nrow, ncol)]\n\n\nKey: &lt;key&gt;\n             key                       label  nrow  ncol\n          &lt;char&gt;                      &lt;char&gt; &lt;int&gt; &lt;int&gt;\n 1:         actg                    ACTG 320  1151    13\n 2:         gbcs        German Breast Cancer   686    10\n 3:         gbsg        German Breast Cancer   686    10\n 4:        grace                  GRACE 1000  1000     8\n 5:         lung                 Lung Cancer   168     9\n 6:         mgus                        MGUS   176     9\n 7:          pbc Primary Biliary Cholangitis   276    19\n 8:         rats                        Rats   300     5\n 9: unemployment       Unemployment Duration  3343     6\n10:      veteran                     Veteran   137     8\n11:         whas      Worcester Heart Attack   481    11\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nUse as_task_surv() to convert your own datasets to a TaskSurv object\nTry tsk(\"lung\")$help() to get more info about the dataset and pre-processing applied\n\n\n\n\n\nCoxPH learner\nThe classical Cox Proportional Hazards model:\n\n\nCode\ncox = lrn(\"surv.coxph\")\ncox\n\n\n&lt;LearnerSurvCoxPH:surv.coxph&gt;: Cox Proportional Hazards\n* Model: -\n* Parameters: list()\n* Packages: mlr3, mlr3proba, survival, distr6\n* Predict Types:  [crank], distr, lp\n* Feature Types: logical, integer, numeric, factor\n* Properties: weights\n\n\nTrain the cox model and access the fit object from the {survival} package:\n\n\nCode\nset.seed(42)\npart = partition(task, ratio = 0.8) # by default, stratification is on `status` variable\ncox$train(task, row_ids = part$train)\n\ncox$model\n\n\nCall:\nsurvival::coxph(formula = task$formula(), data = task$data(), \n    x = TRUE)\n\n                coef  exp(coef)   se(coef)      z      p\nage        1.341e-02  1.013e+00  1.258e-02  1.066 0.2864\nmeal.cal  -5.007e-05  9.999e-01  2.903e-04 -0.172 0.8631\npat.karno -2.142e-02  9.788e-01  9.055e-03 -2.366 0.0180\nph.ecog    5.936e-01  1.811e+00  2.500e-01  2.375 0.0176\nph.karno   2.541e-02  1.026e+00  1.263e-02  2.011 0.0443\nsexm       4.510e-01  1.570e+00  2.298e-01  1.962 0.0497\nwt.loss   -1.500e-02  9.851e-01  8.395e-03 -1.787 0.0739\n\nLikelihood ratio test=23.36  on 7 df, p=0.001475\nn= 135, number of events= 97 \n\n\nVisual output of the model, using the latest version from Github of {mlr3viz}:\n\n\nCode\nautoplot(cox)\n\n\n\n\n\n\n\n\n\n\n\nPrediction types\nLet’s predict using the trained cox model on the test set (output is a PredictionSurv object):\n\n\nCode\np = cox$predict(task, row_ids = part$test)\np\n\n\n&lt;PredictionSurv&gt; for 33 observations:\n    row_ids time status       crank          lp     distr\n          1  455   TRUE -0.16022736 -0.16022736 &lt;list[1]&gt;\n          8  170   TRUE  0.07608537  0.07608537 &lt;list[1]&gt;\n         15  371   TRUE -0.46601841 -0.46601841 &lt;list[1]&gt;\n---                                                      \n        165  191  FALSE -0.30526841 -0.30526841 &lt;list[1]&gt;\n        166  105  FALSE  0.49632782  0.49632782 &lt;list[1]&gt;\n        168  177  FALSE -0.17234336 -0.17234336 &lt;list[1]&gt;\n\n\n\n\n\n\n\n\nPrediction types in mlr3proba\n\n\n\n\ncrank: Continuous risk ranking\nlp: Linear predictor calculated as \\hat\\beta * X_{test}\ndistr: Predicted survival distribution, either discrete or continuous\nresponse: Predicted survival time\n\n\n\nFor the cox model, crank = lp (the higher, the more risk):\n\n\nCode\np$lp\n\n\n           1            2            3            4            5            6 \n-0.160227364  0.076085366 -0.466018411  0.293380270  1.179147761  0.523244848 \n           7            8            9           10           11           12 \n 0.391564618 -0.029833700 -0.149489235 -0.262762070  0.076021387  0.279388934 \n          13           14           15           16           17           18 \n 0.889995280  0.859467193  1.030472975  0.277533930 -0.057165655  0.362416853 \n          19           20           21           22           23           24 \n-0.037670338 -0.295071061 -0.419840184  0.793214751  0.823500785  0.977222024 \n          25           26           27           28           29           30 \n-0.046252611  0.021227170 -0.093541236 -0.158438686  1.615114453  0.003701068 \n          31           32           33 \n-0.305268413  0.496327822 -0.172343361 \n\n\nSurvival prediction is a 2D matrix essentially, with dimensions: observations x time points:\n\n\nCode\np$data$distr[1:5, 1:5]\n\n\n          5        11        12        13        15\n1 0.9959775 0.9919519 0.9879072 0.9837970 0.9796477\n2 0.9949079 0.9898175 0.9847084 0.9795222 0.9742926\n3 0.9970357 0.9940659 0.9910789 0.9880402 0.9849691\n4 0.9936759 0.9873617 0.9810323 0.9746156 0.9681535\n5 0.9847342 0.9696296 0.9546262 0.9395560 0.9245212\n\n\nUsers should use the distr6 interface (Sonabend and Kirdly 2021) to access this prediction type, which allows us to retrieve survival probabilities (or hazards) for any time point of interest:\n\n\nCode\n# first 4 patients in the test set, specific time points:\np$distr[1:4]$survival(c(100, 500, 1200))\n\n\n          [,1]      [,2]      [,3]       [,4]\n100  0.9184997 0.8979186 0.9393041 0.87475634\n500  0.4589611 0.3729197 0.5634874 0.29352281\n1200 0.1684876 0.1048078 0.2693617 0.06062239\n\n\nVisualization of predicted survival curves for 3 test patients:\n\n\nCode\np2 = p$clone()$filter(row_ids = c(1,24,40))\nautoplot(p2, type = \"preds\")\n\n\n\n\n\n\n\n\n\n\n\nModel evaluation\n\n\n\n\n\n\nModel validation\n\n\n\nValidation of a survival model can be done by assessing:\n\nDiscrimination: the ability of the model to distinguish between low and high risk patients\nCalibration: the agreement between the observed and predicted survival probabilities\nOverall performance: the distance between the observed and predicted survival probabilities\n\n\n\nMany measures included in mlr3proba:\n\n\nCode\nmlr_measures$keys(pattern = \"surv\")\n\n\n [1] \"surv.brier\"         \"surv.calib_alpha\"   \"surv.calib_beta\"   \n [4] \"surv.chambless_auc\" \"surv.cindex\"        \"surv.dcalib\"       \n [7] \"surv.graf\"          \"surv.hung_auc\"      \"surv.intlogloss\"   \n[10] \"surv.logloss\"       \"surv.mae\"           \"surv.mse\"          \n[13] \"surv.nagelk_r2\"     \"surv.oquigley_r2\"   \"surv.rcll\"         \n[16] \"surv.rmse\"          \"surv.schmid\"        \"surv.song_auc\"     \n[19] \"surv.song_tnr\"      \"surv.song_tpr\"      \"surv.uno_auc\"      \n[22] \"surv.uno_tnr\"       \"surv.uno_tpr\"       \"surv.xu_r2\"        \n\n\nMost commonly used metrics are for assessing discrimination, such as Harrell’s C-index (Harrell et al. 1982), Uno’s C-index (Uno et al. 2011) and the (time-dependent) AUC (Heagerty and Zheng 2005; Uno et al. 2007):\n\n\nCode\nharrell_c = msr(\"surv.cindex\", id = \"surv.cindex.harrell\")\nuno_c = msr(\"surv.cindex\", weight_meth = \"G2\", id = \"surv.cindex.uno\")\nuno_auci = msr(\"surv.uno_auc\", integrated = TRUE) # across all times in the test set\nuno_auc = msr(\"surv.uno_auc\", integrated = FALSE, times = 10) # at a specific time-point of interest\n\nharrell_c\n\n\n&lt;MeasureSurvCindex:surv.cindex.harrell&gt;\n* Packages: mlr3, mlr3proba\n* Range: [0, 1]\n* Minimize: FALSE\n* Average: macro\n* Parameters: weight_meth=I, tiex=0.5, eps=0.001\n* Properties: -\n* Predict type: crank\n* Return type: Score\n\n\nCode\nuno_auc\n\n\n&lt;MeasureSurvUnoAUC:surv.uno_auc&gt;\n* Packages: mlr3, mlr3proba, survAUC\n* Range: [0, 1]\n* Minimize: FALSE\n* Average: macro\n* Parameters: integrated=FALSE, times=10\n* Properties: requires_task, requires_train_set\n* Predict type: lp\n* Return type: Score\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNot all measures are applicable to all models - prediction type matters!\nMost discrimination metrics use the crank or lp prediction\n\n\n\n\n\nCode\np$score(harrell_c)\n\n\nsurv.cindex.harrell \n          0.6336898 \n\n\nCode\np$score(uno_c, task = task, train_set = part$train)\n\n\nsurv.cindex.uno \n      0.5907828 \n\n\nCalibration is traditionally performed graphically via calibration plots:\n\n\nCode\nautoplot(p, type = \"calib\", task = task, row_ids = part$test)\n\n\n\n\n\n\n\n\n\nBut there exists also calibration metrics, e.g. D-Calibration (Haider et al. 2020):\n\n\nCode\ndcal = msr(\"surv.dcalib\")\ndcal\n\n\n&lt;MeasureSurvDCalibration:surv.dcalib&gt;\n* Packages: mlr3, mlr3proba\n* Range: [0, Inf]\n* Minimize: TRUE\n* Average: macro\n* Parameters: B=10, chisq=FALSE, truncate=Inf\n* Properties: -\n* Predict type: distr\n* Return type: Score\n\n\nCode\np$score(dcal)\n\n\nsurv.dcalib \n   8.320423 \n\n\nOverall survival prediction performance can be assessed by scoring rules such as the Integrated Survival Brier Score (ISBS) (Graf et al. 1999) and the Right-censored Log-Loss (RCLL) (Avati et al. 2020) among others:\n\n\nCode\nrcll = msr(\"surv.rcll\")\nrcll\n\n\n&lt;MeasureSurvRCLL:surv.rcll&gt;\n* Packages: mlr3, mlr3proba, distr6\n* Range: [0, Inf]\n* Minimize: TRUE\n* Average: macro\n* Parameters: eps=1e-15, se=FALSE, ERV=FALSE, na.rm=TRUE\n* Properties: -\n* Predict type: distr\n* Return type: Score\n\n\nCode\np$score(rcll)\n\n\nsurv.rcll \n 23.46684 \n\n\n\n\nCode\nibrier = msr(\"surv.brier\", proper = TRUE)\nibrier\n\n\n&lt;MeasureSurvGraf:surv.graf&gt;\n* Packages: mlr3, mlr3proba\n* Range: [0, Inf]\n* Minimize: TRUE\n* Average: macro\n* Parameters: integrated=TRUE, method=2, se=FALSE, proper=TRUE,\n  eps=0.001, ERV=FALSE\n* Properties: -\n* Predict type: distr\n* Return type: Score\n\n\nCode\np$score(ibrier, task = task, train_set = part$train)\n\n\nsurv.graf \n0.1591112"
  },
  {
    "objectID": "index.html#using-and-tuning-ml-survival-models-on-high-dimensional-data",
    "href": "index.html#using-and-tuning-ml-survival-models-on-high-dimensional-data",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "Using and tuning ML survival models on high-dimensional data",
    "text": "Using and tuning ML survival models on high-dimensional data\n\n\n\n\n\n\nTeaching Aims\n\n\n\n\nCreate your own survival tasks from external data\nEvaluate performance using resample()\nTune hyperparameters with auto_tuner()\n\n\n\nSo far we have used the Cox regression model, but there are many more machine learning methods available via mlr3extralearners (learner list)! We will take a look at the following:\n\nCox elastic net via glmnet (Friedman, Hastie, and Tibshirani 2010)\n\nWe will use lrn(\"surv.cv_glmnet\"), wich internally tunes for lambda using cross-validation\n\nLikelihood-based boosting via CoxBoost (Binder and Schumacher 2008)\n\nWe later use lrn(\"surv.cv_coxboost\", penalty = \"optimCoxBoostPenalty\"), which also uses internal cross-validation to tune its parameters\n\nRandom Forests via ranger (Ishwaran et al. 2008)\nOblique Random Forests via aorsf (Jaeger et al. 2023)\n\nThese learners then cover the range from penalized regression to tree ensembles and boosting.\nLet’s take these learners for a spin on a subset of TCGA breast cancer data with gene expression and clinical features. We first need to create a TaskSurv object from the data, which we can do by reading in the data and then using as_task_surv(). We also add the status column to the stratum, which is necessary for the resampling to ensure a similar proportion of events in the resampling folds with the complete dataset.\n\n\nCode\ntcga = readRDS(\"data/tcga.rds\")\n\ntask_tcga = mlr3proba::as_task_surv(\n  x = tcga, \n  time = \"time\", event = \"status\", id = \"BRCA-TCGA\"\n)\n\n# Set stratum for resampling\ntask_tcga$set_col_roles(\"status\", add_to = \"stratum\")\ntask_tcga\n\n\n&lt;TaskSurv:BRCA-TCGA&gt; (1047 x 54)\n* Target: time, status\n* Properties: strata\n* Features (52):\n  - dbl (52): ACTR3B, ANLN, BAG1, BCL2, BIRC5, BLVRA, CCNB1, CCNE1,\n    CDC20, CDC6, CDH3, CENPF, CEP55, CXXC5, EGFR, ERBB2, ESR1, EXO1,\n    FGFR4, FOXA1, FOXC1, GPR160, GRB7, KIF2C, KRT14, KRT17, KRT5, MAPT,\n    MDM2, MELK, MIA, MKI67, MLPH, MMP11, MYBL2, MYC, NAT1, NDC80, NUF2,\n    ORC6, PGR, PHGDH, PTTG1, RRM2, SFRP1, SLC39A6, TMEM45B, TYMS,\n    UBE2C, UBE2T, age, ethnicity\n* Strata: status\n\n\nWe can instantiate our learners as we’ve seen before — we’re sticking to mostly vanilla settings for now.\nWe can let glmnet determine the optimal value for lambda with it’s internal cross-validation method Similarly, CoxBoost could tune itself, but we’ll stick with a simple version to save some time on compute! For the forests, we use 100 trees each for speed and otherwise accept the defaults.\n\n\nCode\nlrn_glmnet = lrn(\"surv.cv_glmnet\", alpha = 0.5)\nlrn_coxboost = lrn(\"surv.coxboost\", penalty = 100)\nlrn_ranger = lrn(\"surv.ranger\", num.trees = 100)\nlrn_aorsf = lrn(\"surv.aorsf\", n_tree = 100)\n\n\nWe can now use resample() to evaluate the performance of each of these learners on the task. To do this, we decide on two measures: Harrell’s C and the integrated brier score, and we also instantiate a resampling to use for comparison, such that we ensure all learners see the same data.\n\n\nCode\nmeasures = list(msr(\"surv.cindex\", id = \"cindex\"), msr(\"surv.brier\", id = \"ibs\"))\n\nresampling = rsmp(\"cv\", folds = 3)\nresampling$instantiate(task_tcga)\n\nrr_glmnet = resample(\n  task = task_tcga,\n  learner = lrn_glmnet,\n  resampling = resampling\n)\n\n\nINFO  [19:47:21.024] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:22.170] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:23.032] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\n\n\nCode\nrr_glmnet$score(measures)\n\n\n     task_id     learner_id resampling_id iteration   cindex       ibs\n      &lt;char&gt;         &lt;char&gt;        &lt;char&gt;     &lt;int&gt;    &lt;num&gt;     &lt;num&gt;\n1: BRCA-TCGA surv.cv_glmnet            cv         1 0.510439 0.1304813\n2: BRCA-TCGA surv.cv_glmnet            cv         2 0.500000 0.2799500\n3: BRCA-TCGA surv.cv_glmnet            cv         3 0.500000 0.2004451\nHidden columns: task, learner, resampling, prediction\n\n\nWell, looks like glmnet out of the box does not do well on this dataset, judging by the C-index of 0.5. This is what the null model achieves, after all!\nFeel free to play with the parameters of glmnet a bit more — for example, does changing alpha help?\nWe can repeat the same procedure for the other learners:\n\n\nCode\nrr_coxboost = resample(\n  task = task_tcga,\n  learner = lrn_coxboost,\n  resampling = resampling\n)\n\n\nINFO  [19:47:24.315] [mlr3] Applying learner 'surv.coxboost' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:24.829] [mlr3] Applying learner 'surv.coxboost' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:25.287] [mlr3] Applying learner 'surv.coxboost' on task 'BRCA-TCGA' (iter 3/3)\n\n\nCode\nrr_ranger = resample(\n  task = task_tcga,\n  learner = lrn_ranger,\n  resampling = resampling\n)\n\n\nINFO  [19:47:25.894] [mlr3] Applying learner 'surv.ranger' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:28.454] [mlr3] Applying learner 'surv.ranger' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:30.711] [mlr3] Applying learner 'surv.ranger' on task 'BRCA-TCGA' (iter 3/3)\n\n\nCode\nrr_aorsf = resample(\n  task = task_tcga,\n  learner = lrn_aorsf,\n  resampling = resampling\n)\n\n\nINFO  [19:47:33.232] [mlr3] Applying learner 'surv.aorsf' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:33.324] [mlr3] Applying learner 'surv.aorsf' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:33.365] [mlr3] Applying learner 'surv.aorsf' on task 'BRCA-TCGA' (iter 3/3)\n\n\nCode\nrr_coxboost$score(measures)\n\n\n     task_id    learner_id resampling_id iteration    cindex       ibs\n      &lt;char&gt;        &lt;char&gt;        &lt;char&gt;     &lt;int&gt;     &lt;num&gt;     &lt;num&gt;\n1: BRCA-TCGA surv.coxboost            cv         1 0.5342340 0.1572601\n2: BRCA-TCGA surv.coxboost            cv         2 0.6904511 0.2924077\n3: BRCA-TCGA surv.coxboost            cv         3 0.6965025 0.1961894\nHidden columns: task, learner, resampling, prediction\n\n\nCode\nrr_ranger$score(measures)\n\n\n     task_id  learner_id resampling_id iteration    cindex       ibs\n      &lt;char&gt;      &lt;char&gt;        &lt;char&gt;     &lt;int&gt;     &lt;num&gt;     &lt;num&gt;\n1: BRCA-TCGA surv.ranger            cv         1 0.5965613 0.1784851\n2: BRCA-TCGA surv.ranger            cv         2 0.6519388 0.2638147\n3: BRCA-TCGA surv.ranger            cv         3 0.6072805 0.2128354\nHidden columns: task, learner, resampling, prediction\n\n\nCode\nrr_aorsf$score(measures)\n\n\n     task_id learner_id resampling_id iteration    cindex       ibs\n      &lt;char&gt;     &lt;char&gt;        &lt;char&gt;     &lt;int&gt;     &lt;num&gt;     &lt;num&gt;\n1: BRCA-TCGA surv.aorsf            cv         1 0.5784464 0.1480976\n2: BRCA-TCGA surv.aorsf            cv         2 0.6875495 0.2612929\n3: BRCA-TCGA surv.aorsf            cv         3 0.6519629 0.2144734\nHidden columns: task, learner, resampling, prediction\n\n\nNow we have a comparison of the performance of the different learners on the task. We can again aggregate these results to get a summary of the performance of each learner across all resamplings:\n\n\nCode\nrr_glmnet$aggregate(measures)\n\n\n   cindex       ibs \n0.5034797 0.2036254 \n\n\nCode\nrr_coxboost$aggregate(measures)\n\n\n   cindex       ibs \n0.6403959 0.2152857 \n\n\nCode\nrr_ranger$aggregate(measures)\n\n\n   cindex       ibs \n0.6185935 0.2183784 \n\n\nCode\nrr_aorsf$aggregate(measures)\n\n\n   cindex       ibs \n0.6393196 0.2079546 \n\n\nOf course in practice we want to tune these learners for optimal performance. Tuning can be quite a complex topic, but mlr3 makes it relatively simple with the auto_tuner approach. Without going into too much detail about the theory, for tuning we need:\n\nA learner to tune, with information on which parameters to tune in which range (the search space)\nA strategy (tuner), such as random search, grid search, or more advanced options, which defines how we search for new parameter values to try\nA resampling strategy to evaluate performance during tuning\nA tuning measure top optimize for\nA stopping criterion, e.g. stopping after 100 evaluations\n\n\n\nCode\nat_glmnet = auto_tuner(\n  learner = lrn(\"surv.cv_glmnet\", alpha = to_tune(0, 1)),\n  tuner = tnr(\"grid_search\"),\n  resampling = rsmp(\"cv\", folds = 3),\n  measure = msr(\"surv.cindex\"),\n  term_evals = 100\n)\n\n\nWe can then try this out on the full dataset like so:\n\n\nCode\nat_glmnet$train(task_tcga)\n\n\nINFO  [19:47:34.721] [bbotk] Starting to optimize 1 parameter(s) with '&lt;OptimizerBatchGridSearch&gt;' and '&lt;TerminatorEvals&gt; [n_evals=100, k=0]'\nINFO  [19:47:34.726] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:34.731] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:34.734] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:35.901] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:36.757] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:37.622] [mlr3] Finished benchmark\nINFO  [19:47:37.640] [bbotk] Result of batch 1:\nINFO  [19:47:37.641] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:37.641] [bbotk]  0.5555556   0.5520563        0      0            2.874\nINFO  [19:47:37.641] [bbotk]                                 uhash\nINFO  [19:47:37.641] [bbotk]  e6f51827-4d0f-4214-a60c-0e1eda5d2b10\nINFO  [19:47:37.643] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:37.646] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:37.648] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:38.621] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:39.481] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:40.339] [mlr3] Finished benchmark\nINFO  [19:47:40.357] [bbotk] Result of batch 2:\nINFO  [19:47:40.358] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:40.358] [bbotk]  0.8888889   0.5520563        0      0            2.678\nINFO  [19:47:40.358] [bbotk]                                 uhash\nINFO  [19:47:40.358] [bbotk]  df1a806b-8a09-4cab-8dd0-c14996e23055\nINFO  [19:47:40.359] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:40.363] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:40.365] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:41.352] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:42.239] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:43.122] [mlr3] Finished benchmark\nINFO  [19:47:43.136] [bbotk] Result of batch 3:\nINFO  [19:47:43.137] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:43.137] [bbotk]  0.7777778         0.5        0      0            2.743\nINFO  [19:47:43.137] [bbotk]                                 uhash\nINFO  [19:47:43.137] [bbotk]  137974cc-ad99-4575-b61c-f92401a10ecb\nINFO  [19:47:43.138] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:43.142] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:43.144] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:44.136] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:44.987] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:45.811] [mlr3] Finished benchmark\nINFO  [19:47:45.828] [bbotk] Result of batch 4:\nINFO  [19:47:45.829] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:45.829] [bbotk]  0.6666667   0.5496212        0      0            2.654\nINFO  [19:47:45.829] [bbotk]                                 uhash\nINFO  [19:47:45.829] [bbotk]  265cbd30-d809-444c-844d-f70959c5bcfe\nINFO  [19:47:45.830] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:45.833] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:45.836] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:47.043] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:48.010] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:48.970] [mlr3] Finished benchmark\nINFO  [19:47:48.983] [bbotk] Result of batch 5:\nINFO  [19:47:48.984] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:48.984] [bbotk]  0.1111111         0.5        0      0            3.116\nINFO  [19:47:48.984] [bbotk]                                 uhash\nINFO  [19:47:48.984] [bbotk]  39afa0ac-fbd3-4958-a580-225ce8e495ec\nINFO  [19:47:48.985] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:48.988] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:48.991] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:49.944] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:50.822] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:51.631] [mlr3] Finished benchmark\nINFO  [19:47:51.645] [bbotk] Result of batch 6:\nINFO  [19:47:51.646] [bbotk]  alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:51.646] [bbotk]      1         0.5        0      0            2.625\nINFO  [19:47:51.646] [bbotk]                                 uhash\nINFO  [19:47:51.646] [bbotk]  e6b9659f-7e93-4f16-912f-71f01104a460\nINFO  [19:47:51.647] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:51.651] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:51.653] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:52.560] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:53.277] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:53.982] [mlr3] Finished benchmark\nINFO  [19:47:53.995] [bbotk] Result of batch 7:\nINFO  [19:47:53.996] [bbotk]  alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:53.996] [bbotk]      0   0.5921736        0      0            2.315\nINFO  [19:47:53.996] [bbotk]                                 uhash\nINFO  [19:47:53.996] [bbotk]  6128d664-0016-400c-a3d6-d49f3d8b7e5b\nINFO  [19:47:53.997] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:54.001] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:54.003] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:55.058] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:55.944] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:56.869] [mlr3] Finished benchmark\nINFO  [19:47:56.888] [bbotk] Result of batch 8:\nINFO  [19:47:56.889] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:56.889] [bbotk]  0.3333333         0.5        0      0            2.852\nINFO  [19:47:56.889] [bbotk]                                 uhash\nINFO  [19:47:56.889] [bbotk]  ad216737-b4a8-49b6-a606-e56bc8ec8227\nINFO  [19:47:56.890] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:56.894] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:56.896] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:47:57.941] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:47:58.859] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:47:59.704] [mlr3] Finished benchmark\nINFO  [19:47:59.723] [bbotk] Result of batch 9:\nINFO  [19:47:59.724] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:47:59.724] [bbotk]  0.4444444        0.55        0      0            2.794\nINFO  [19:47:59.724] [bbotk]                                 uhash\nINFO  [19:47:59.724] [bbotk]  ca135f58-e633-4561-88d6-db3950d15018\nINFO  [19:47:59.725] [bbotk] Evaluating 1 configuration(s)\nINFO  [19:47:59.728] [mlr3] Running benchmark with 3 resampling iterations\nINFO  [19:47:59.731] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 1/3)\nINFO  [19:48:00.751] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 2/3)\nINFO  [19:48:01.695] [mlr3] Applying learner 'surv.cv_glmnet' on task 'BRCA-TCGA' (iter 3/3)\nINFO  [19:48:02.600] [mlr3] Finished benchmark\nINFO  [19:48:02.614] [bbotk] Result of batch 10:\nINFO  [19:48:02.615] [bbotk]      alpha surv.cindex warnings errors runtime_learners\nINFO  [19:48:02.615] [bbotk]  0.2222222   0.5520563        0      0            2.855\nINFO  [19:48:02.615] [bbotk]                                 uhash\nINFO  [19:48:02.615] [bbotk]  5bc44bdd-2afa-491d-b4d5-b422745d1bef\nINFO  [19:48:02.625] [bbotk] Finished optimizing after 10 evaluation(s)\nINFO  [19:48:02.626] [bbotk] Result:\nINFO  [19:48:02.626] [bbotk]  alpha learner_param_vals  x_domain surv.cindex\nINFO  [19:48:02.626] [bbotk]  &lt;num&gt;             &lt;list&gt;    &lt;list&gt;       &lt;num&gt;\nINFO  [19:48:02.626] [bbotk]      0          &lt;list[1]&gt; &lt;list[1]&gt;   0.5921736\n\n\nWe can see all evaluated parameter combinations in the $tuning_instance and the best result in $tuning_result\n\n\nCode\nat_glmnet$tuning_instance\n\n\n&lt;TuningInstanceBatchSingleCrit&gt;\n* State:  Optimized\n* Objective: &lt;ObjectiveTuningBatch:surv.cv_glmnet_on_BRCA-TCGA&gt;\n* Search Space:\n       id    class lower upper nlevels\n   &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n1:  alpha ParamDbl     0     1     Inf\n* Terminator: &lt;TerminatorEvals&gt;\n* Result:\n   alpha surv.cindex\n   &lt;num&gt;       &lt;num&gt;\n1:     0   0.5921736\n* Archive:\n        alpha surv.cindex\n        &lt;num&gt;       &lt;num&gt;\n 1: 0.5555556   0.5520563\n 2: 0.8888889   0.5520563\n 3: 0.7777778   0.5000000\n 4: 0.6666667   0.5496212\n 5: 0.1111111   0.5000000\n 6: 1.0000000   0.5000000\n 7: 0.0000000   0.5921736\n 8: 0.3333333   0.5000000\n 9: 0.4444444   0.5500000\n10: 0.2222222   0.5520563\n\n\nCode\nat_glmnet$tuning_result\n\n\n   alpha learner_param_vals  x_domain surv.cindex\n   &lt;num&gt;             &lt;list&gt;    &lt;list&gt;       &lt;num&gt;\n1:     0          &lt;list[1]&gt; &lt;list[1]&gt;   0.5921736\n\n\nWe get a better result than 0.5 now, but note we used all of the data now, so while this would be the approach we could use to find a model for new data, right now we want to compare our learners fairly! That means: Nested resampling, where we use resampling for tuning, and for evaluation in two layers.\nIn this step, we simplify the resample() steps using benchmark(), and we’ll also tune some of the learners.\nWe start by first defining our learners with tuning, using cv_coxboost to tune itself without the auto_tuner and tuning glmnet similar to before, but we’ll set small budgets to keep the runtime of this example code managable:\n\n\nCode\nat_glmnet = auto_tuner(\n  learner = lrn(\"surv.cv_glmnet\", alpha = to_tune(0, 1)),\n  tuner = tnr(\"grid_search\"),\n  resampling = rsmp(\"cv\", folds = 3),\n  measure = msr(\"surv.cindex\"),\n  term_evals = 25\n)\n\n# For CoxBoost's optimCoxBoostPenalty, iter.max is analogous to term_evals \nlrn_cvcoxboost = lrn(\"surv.cv_coxboost\", penalty = \"optimCoxBoostPenalty\", iter.max = 10)\n\n\nThe we create a benchmark design of one or more tasks and at least two learners like so:\n\n\nCode\ndesign = benchmark_grid(\n  tasks = task_tcga,\n  learners = list(at_glmnet, lrn_ranger, lrn_aorsf, lrn_cvcoxboost),\n  resamplings = resampling\n)\n\ndesign\n\n\n        task              learner resampling\n      &lt;char&gt;               &lt;char&gt;     &lt;char&gt;\n1: BRCA-TCGA surv.cv_glmnet.tuned         cv\n2: BRCA-TCGA          surv.ranger         cv\n3: BRCA-TCGA           surv.aorsf         cv\n4: BRCA-TCGA     surv.cv_coxboost         cv\n\n\nTo perform the benchmark, we use the aptly named benchmark() function, which will perform the necessary resampling iterations and store the results for us — this will take a moment!\nWhen we $score() or $aggregate() the benchmark result, we should get the same exact scores as before for the untuned learners because we used the instantiated resampling from earlier, meaning each learner again saw the same data — glmnet and coxboost however should do better because now we spent time tuning them!\n\n\nCode\n# bmr$score(measures)\nbmr$aggregate(msr(\"surv.cindex\"))\n\n\nWe can also visualize the results — see ?autoplot.BenchmarkResult for more options:\n\n\nCode\nautoplot(bmr, type = \"boxplot\", measure = msr(\"surv.cindex\"))\n\n\nFrom our quick tests, which learner now seems to have done the best? Given that we used these learners more or less off the shelf without tuning, we should not put too much weight on these results, but it’s a good starting point for further exploration!\nTuning is a complex topic we barely scratched the surface of, but you can learn more about it in the mlr3book chapter!"
  },
  {
    "objectID": "index.html#benchmarking-with-multiple-datasets",
    "href": "index.html#benchmarking-with-multiple-datasets",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "Benchmarking with multiple datasets",
    "text": "Benchmarking with multiple datasets\n\n\n\n\n\n\nTeaching Aims\n\n\n\n\nPerform a small-scale benchmark\nAggregate and visualize the results\nPerform a statistical analysis of the results\n\n\n\nA proper benchmark can take a lot of time and planning, but it can pay off to get a good overview of the performance of different learners on different tasks relevant to your field!\nIn this example, we’ll take a number of small datasets provided by mlr3proba and benchmark the learners we used before on them. These tasks are small enough to hopefully not spend too much time waiting for computations to finish, but we hope you get enough of an idea to feel confident to perform your own experiments!\nThe procedure is as follows:\n\nGather tasks as a list.\nGather our learners. Normally this would include deciding on tuning spaces!\nDefine a resampling strategy.\nDecide on measures to use.\n\nFor step 1, we’ll select some survival tasks from mlr_tasks for this benchmark:\n\n\nCode\ntasks = list(\n  tsk(\"actg\"),\n  tsk(\"gbcs\"),\n  tsk(\"grace\"),\n  tsk(\"lung\"),\n  tsk(\"mgus\")\n)\n\ntasks\n\n\n[[1]]\n&lt;TaskSurv:actg&gt; (1151 x 13): ACTG 320\n* Target: time, status\n* Properties: -\n* Features (11):\n  - dbl (4): age, cd4, priorzdv, sexF\n  - fct (4): ivdrug, karnof, raceth, txgrp\n  - int (3): hemophil, strat2, tx\n\n[[2]]\n&lt;TaskSurv:gbcs&gt; (686 x 10): German Breast Cancer\n* Target: time, status\n* Properties: -\n* Features (8):\n  - dbl (4): age, estrg_recp, prog_recp, size\n  - int (4): grade, hormone, menopause, nodes\n\n[[3]]\n&lt;TaskSurv:grace&gt; (1000 x 8): GRACE 1000\n* Target: time, status\n* Properties: -\n* Features (6):\n  - dbl (4): age, los, revascdays, sysbp\n  - int (2): revasc, stchange\n\n[[4]]\n&lt;TaskSurv:lung&gt; (168 x 9): Lung Cancer\n* Target: time, status\n* Properties: -\n* Features (7):\n  - int (6): age, meal.cal, pat.karno, ph.ecog, ph.karno, wt.loss\n  - fct (1): sex\n\n[[5]]\n&lt;TaskSurv:mgus&gt; (176 x 9): MGUS\n* Target: time, status\n* Properties: -\n* Features (7):\n  - dbl (6): age, alb, creat, dxyr, hgb, mspike\n  - fct (1): sex\n\n\nMany have categorical features (fct), which can be a bit tricky to handle for some learners, so we will take a shortcut and add a feature encoding PipeOp to the learners that need it. Pipelines and preprocessing are very useful, and the mlr3book again has you covered!\nWe use the po(\"encode\") pipe operator to encode the factors as dummy-encoded variables (method = \"treatment\") for the Cox model, and use the default (one-hot encoding) for the others. The %&gt;&gt;% operator is used to chain PipeOps and learners together, and we wrap the pipeline in as_learner such that we can treat it as a learner just like the others.\n\n\nCode\npreproc = po(\"encode\", method = \"treatment\")\n\nlearners = list(\n  cox = as_learner(preproc %&gt;&gt;% lrn(\"surv.coxph\",id = \"cph\")),\n  glmnet = as_learner(preproc %&gt;&gt;% lrn(\"surv.cv_glmnet\", alpha = 0.5)),\n  ranger = lrn(\"surv.ranger\", num.trees = 100),\n  aorsf = lrn(\"surv.aorsf\", n_tree = 100),\n  coxboost = as_learner(preproc %&gt;&gt;% lrn(\"surv.coxboost\", penalty = 100))\n)\n\n\nA small convenience thing we can do here is to set IDs for the learners, which will make the output of further steps more readable:\n\n\n$cox\n[1] \"cox\"\n\n$glmnet\n[1] \"glmnet\"\n\n$ranger\n[1] \"ranger\"\n\n$aorsf\n[1] \"aorsf\"\n\n$coxboost\n[1] \"coxboost\"\n\n\nMoving on to the benchmark, we create a design grid as before, only now we have multiple tasks. Luckily, benchmark_grid() can handle this for us by instantiating the resampling for each task, so we don’t have to worry about this here!\n\n\nCode\ndesign = benchmark_grid(\n  tasks = tasks,\n  learners = learners,\n  resamplings = rsmp(\"cv\", folds = 3)\n)\n\ndesign\n\n\n      task  learner resampling\n    &lt;char&gt;   &lt;char&gt;     &lt;char&gt;\n 1:   actg      cox         cv\n 2:   actg   glmnet         cv\n 3:   actg   ranger         cv\n 4:   actg    aorsf         cv\n 5:   actg coxboost         cv\n 6:   gbcs      cox         cv\n 7:   gbcs   glmnet         cv\n 8:   gbcs   ranger         cv\n 9:   gbcs    aorsf         cv\n10:   gbcs coxboost         cv\n11:  grace      cox         cv\n12:  grace   glmnet         cv\n13:  grace   ranger         cv\n14:  grace    aorsf         cv\n15:  grace coxboost         cv\n16:   lung      cox         cv\n17:   lung   glmnet         cv\n18:   lung   ranger         cv\n19:   lung    aorsf         cv\n20:   lung coxboost         cv\n21:   mgus      cox         cv\n22:   mgus   glmnet         cv\n23:   mgus   ranger         cv\n24:   mgus    aorsf         cv\n25:   mgus coxboost         cv\n      task  learner resampling\n\n\n\n\nINFO  [19:48:03.917] [mlr3] Running benchmark with 75 resampling iterations\nINFO  [19:48:03.920] [mlr3] Applying learner 'cox' on task 'actg' (iter 1/3)\nINFO  [19:48:03.983] [mlr3] Applying learner 'cox' on task 'actg' (iter 2/3)\nINFO  [19:48:04.212] [mlr3] Applying learner 'cox' on task 'actg' (iter 3/3)\nINFO  [19:48:04.264] [mlr3] Applying learner 'glmnet' on task 'actg' (iter 1/3)\nINFO  [19:48:04.605] [mlr3] Applying learner 'glmnet' on task 'actg' (iter 2/3)\nINFO  [19:48:04.911] [mlr3] Applying learner 'glmnet' on task 'actg' (iter 3/3)\nINFO  [19:48:05.247] [mlr3] Applying learner 'ranger' on task 'actg' (iter 1/3)\nINFO  [19:48:05.422] [mlr3] Applying learner 'ranger' on task 'actg' (iter 2/3)\nINFO  [19:48:05.589] [mlr3] Applying learner 'ranger' on task 'actg' (iter 3/3)\nINFO  [19:48:05.764] [mlr3] Applying learner 'aorsf' on task 'actg' (iter 1/3)\nINFO  [19:48:05.794] [mlr3] Applying learner 'aorsf' on task 'actg' (iter 2/3)\nINFO  [19:48:05.823] [mlr3] Applying learner 'aorsf' on task 'actg' (iter 3/3)\nINFO  [19:48:05.850] [mlr3] Applying learner 'coxboost' on task 'actg' (iter 1/3)\nINFO  [19:48:06.110] [mlr3] Applying learner 'coxboost' on task 'actg' (iter 2/3)\nINFO  [19:48:06.384] [mlr3] Applying learner 'coxboost' on task 'actg' (iter 3/3)\nINFO  [19:48:06.654] [mlr3] Applying learner 'cox' on task 'gbcs' (iter 1/3)\nINFO  [19:48:06.687] [mlr3] Applying learner 'cox' on task 'gbcs' (iter 2/3)\nINFO  [19:48:06.721] [mlr3] Applying learner 'cox' on task 'gbcs' (iter 3/3)\nINFO  [19:48:06.754] [mlr3] Applying learner 'glmnet' on task 'gbcs' (iter 1/3)\nINFO  [19:48:06.861] [mlr3] Applying learner 'glmnet' on task 'gbcs' (iter 2/3)\nINFO  [19:48:06.954] [mlr3] Applying learner 'glmnet' on task 'gbcs' (iter 3/3)\nINFO  [19:48:07.063] [mlr3] Applying learner 'ranger' on task 'gbcs' (iter 1/3)\nINFO  [19:48:07.223] [mlr3] Applying learner 'ranger' on task 'gbcs' (iter 2/3)\nINFO  [19:48:07.384] [mlr3] Applying learner 'ranger' on task 'gbcs' (iter 3/3)\nINFO  [19:48:07.546] [mlr3] Applying learner 'aorsf' on task 'gbcs' (iter 1/3)\nINFO  [19:48:07.569] [mlr3] Applying learner 'aorsf' on task 'gbcs' (iter 2/3)\nINFO  [19:48:07.594] [mlr3] Applying learner 'aorsf' on task 'gbcs' (iter 3/3)\nINFO  [19:48:07.619] [mlr3] Applying learner 'coxboost' on task 'gbcs' (iter 1/3)\nINFO  [19:48:08.002] [mlr3] Applying learner 'coxboost' on task 'gbcs' (iter 2/3)\nINFO  [19:48:08.200] [mlr3] Applying learner 'coxboost' on task 'gbcs' (iter 3/3)\nINFO  [19:48:08.391] [mlr3] Applying learner 'cox' on task 'grace' (iter 1/3)\nINFO  [19:48:08.428] [mlr3] Applying learner 'cox' on task 'grace' (iter 2/3)\nINFO  [19:48:08.460] [mlr3] Applying learner 'cox' on task 'grace' (iter 3/3)\nINFO  [19:48:08.492] [mlr3] Applying learner 'glmnet' on task 'grace' (iter 1/3)\nINFO  [19:48:08.630] [mlr3] Applying learner 'glmnet' on task 'grace' (iter 2/3)\nINFO  [19:48:08.779] [mlr3] Applying learner 'glmnet' on task 'grace' (iter 3/3)\nINFO  [19:48:08.921] [mlr3] Applying learner 'ranger' on task 'grace' (iter 1/3)\nINFO  [19:48:09.125] [mlr3] Applying learner 'ranger' on task 'grace' (iter 2/3)\nINFO  [19:48:09.328] [mlr3] Applying learner 'ranger' on task 'grace' (iter 3/3)\nINFO  [19:48:09.526] [mlr3] Applying learner 'aorsf' on task 'grace' (iter 1/3)\nINFO  [19:48:09.558] [mlr3] Applying learner 'aorsf' on task 'grace' (iter 2/3)\nINFO  [19:48:09.589] [mlr3] Applying learner 'aorsf' on task 'grace' (iter 3/3)\nINFO  [19:48:09.621] [mlr3] Applying learner 'coxboost' on task 'grace' (iter 1/3)\nINFO  [19:48:10.164] [mlr3] Applying learner 'coxboost' on task 'grace' (iter 2/3)\nINFO  [19:48:10.678] [mlr3] Applying learner 'coxboost' on task 'grace' (iter 3/3)\nINFO  [19:48:11.001] [mlr3] Applying learner 'cox' on task 'lung' (iter 1/3)\nINFO  [19:48:11.043] [mlr3] Applying learner 'cox' on task 'lung' (iter 2/3)\nINFO  [19:48:11.084] [mlr3] Applying learner 'cox' on task 'lung' (iter 3/3)\nINFO  [19:48:11.133] [mlr3] Applying learner 'glmnet' on task 'lung' (iter 1/3)\nINFO  [19:48:11.200] [mlr3] Applying learner 'glmnet' on task 'lung' (iter 2/3)\nINFO  [19:48:11.269] [mlr3] Applying learner 'glmnet' on task 'lung' (iter 3/3)\nINFO  [19:48:11.344] [mlr3] Applying learner 'ranger' on task 'lung' (iter 1/3)\nINFO  [19:48:11.396] [mlr3] Applying learner 'ranger' on task 'lung' (iter 2/3)\nINFO  [19:48:11.431] [mlr3] Applying learner 'ranger' on task 'lung' (iter 3/3)\nINFO  [19:48:11.468] [mlr3] Applying learner 'aorsf' on task 'lung' (iter 1/3)\nINFO  [19:48:11.484] [mlr3] Applying learner 'aorsf' on task 'lung' (iter 2/3)\nINFO  [19:48:11.501] [mlr3] Applying learner 'aorsf' on task 'lung' (iter 3/3)\nINFO  [19:48:11.518] [mlr3] Applying learner 'coxboost' on task 'lung' (iter 1/3)\nINFO  [19:48:11.625] [mlr3] Applying learner 'coxboost' on task 'lung' (iter 2/3)\nINFO  [19:48:11.718] [mlr3] Applying learner 'coxboost' on task 'lung' (iter 3/3)\nINFO  [19:48:11.833] [mlr3] Applying learner 'cox' on task 'mgus' (iter 1/3)\nINFO  [19:48:11.875] [mlr3] Applying learner 'cox' on task 'mgus' (iter 2/3)\nINFO  [19:48:11.932] [mlr3] Applying learner 'cox' on task 'mgus' (iter 3/3)\nINFO  [19:48:11.974] [mlr3] Applying learner 'glmnet' on task 'mgus' (iter 1/3)\nINFO  [19:48:12.041] [mlr3] Applying learner 'glmnet' on task 'mgus' (iter 2/3)\nINFO  [19:48:12.115] [mlr3] Applying learner 'glmnet' on task 'mgus' (iter 3/3)\nINFO  [19:48:12.193] [mlr3] Applying learner 'ranger' on task 'mgus' (iter 1/3)\nINFO  [19:48:12.237] [mlr3] Applying learner 'ranger' on task 'mgus' (iter 2/3)\nINFO  [19:48:12.281] [mlr3] Applying learner 'ranger' on task 'mgus' (iter 3/3)\nINFO  [19:48:12.325] [mlr3] Applying learner 'aorsf' on task 'mgus' (iter 1/3)\nINFO  [19:48:12.344] [mlr3] Applying learner 'aorsf' on task 'mgus' (iter 2/3)\nINFO  [19:48:12.363] [mlr3] Applying learner 'aorsf' on task 'mgus' (iter 3/3)\nINFO  [19:48:12.381] [mlr3] Applying learner 'coxboost' on task 'mgus' (iter 1/3)\nINFO  [19:48:12.525] [mlr3] Applying learner 'coxboost' on task 'mgus' (iter 2/3)\nINFO  [19:48:12.661] [mlr3] Applying learner 'coxboost' on task 'mgus' (iter 3/3)\n\n\nWarning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, : Loglik converged before variable  7,8,17,18 ; coefficient may be infinite. \nThis happened PipeOp cph's $train()\n\n\nWarning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, : Loglik converged before variable  7,15,17 ; coefficient may be infinite. \nThis happened PipeOp cph's $train()\n\n\nWarning in coxph.fit(X, Y, istrat, offset, init, control, weights = weights, : Loglik converged before variable  7,16,17,18 ; coefficient may be infinite. \nThis happened PipeOp cph's $train()\n\n\nINFO  [19:48:12.804] [mlr3] Finished benchmark\n\n\nWe pick the IBS again and aggregate the results:\n\n\nCode\nmeasure = msr(\"surv.brier\", id = \"ibs\")\n\nbmr$aggregate(measure)\n\n\n       nr task_id learner_id resampling_id iters        ibs\n    &lt;int&gt;  &lt;char&gt;     &lt;char&gt;        &lt;char&gt; &lt;int&gt;      &lt;num&gt;\n 1:     1    actg        cox            cv     3 0.05902790\n 2:     2    actg     glmnet            cv     3 0.05923469\n 3:     3    actg     ranger            cv     3 0.05908296\n 4:     4    actg      aorsf            cv     3 0.05766157\n 5:     5    actg   coxboost            cv     3 0.05840944\n 6:     6    gbcs        cox            cv     3 0.12337192\n 7:     7    gbcs     glmnet            cv     3 0.13618790\n 8:     8    gbcs     ranger            cv     3 0.13351567\n 9:     9    gbcs      aorsf            cv     3 0.12284371\n10:    10    gbcs   coxboost            cv     3 0.12331885\n11:    11   grace        cox            cv     3 0.09740836\n12:    12   grace     glmnet            cv     3 0.10442313\n13:    13   grace     ranger            cv     3 0.10441897\n14:    14   grace      aorsf            cv     3 0.09085346\n15:    15   grace   coxboost            cv     3 0.09740773\n [ reached getOption(\"max.print\") -- omitted 11 rows ]\nHidden columns: resample_result\n\n\n\nStatistical analysis\nRather than just computing average scores, we can leverage mlr3benchmark for additional analysis steps, including a statistical analysis of the results. The starting point is to convert the benchmark result (bmr) to an aggregated benchmark result (bma), which is a more convenient format for further analysis:\n\n\nCode\nlibrary(mlr3benchmark)\nbma = as_benchmark_aggr(bmr, meas = measure)\nbma\n\n\n&lt;BenchmarkAggr&gt; of 25 rows with 5 tasks, 5 learners and 1 measure\n    task_id learner_id        ibs\n     &lt;fctr&gt;     &lt;fctr&gt;      &lt;num&gt;\n 1:    actg        cox 0.05902790\n 2:    actg     glmnet 0.05923469\n 3:    actg     ranger 0.05908296\n 4:    actg      aorsf 0.05766157\n 5:    actg   coxboost 0.05840944\n 6:    gbcs        cox 0.12337192\n 7:    gbcs     glmnet 0.13618790\n 8:    gbcs     ranger 0.13351567\n 9:    gbcs      aorsf 0.12284371\n10:    gbcs   coxboost 0.12331885\n11:   grace        cox 0.09740836\n12:   grace     glmnet 0.10442313\n13:   grace     ranger 0.10441897\n14:   grace      aorsf 0.09085346\n15:   grace   coxboost 0.09740773\n16:    lung        cox 0.16671983\n17:    lung     glmnet 0.15716199\n18:    lung     ranger 0.18335500\n19:    lung      aorsf 0.16104073\n20:    lung   coxboost 0.16608469\n21:    mgus        cox 0.12512740\n22:    mgus     glmnet 0.12656255\n23:    mgus     ranger 0.14286162\n24:    mgus      aorsf 0.12998025\n25:    mgus   coxboost 0.12511761\n    task_id learner_id        ibs\n\n\nThis brings with it a few more autoplot methods, see ?autoplot.BenchmarkAggr.\n\n\nCode\nautoplot(bma, type = \"box\", meas = \"ibs\")\n\n\n\n\n\n\n\n\n\nFor the statistical analysis, we can use a simple rank-based analysis with a global Friedman test to see if there are significant differences between the learners:\n\n\nCode\nbma$friedman_test()\n\n\n\n    Friedman rank sum test\n\ndata:  ibs and learner_id and task_id\nFriedman chi-squared = 10.08, df = 4, p-value = 0.0391\n\n\nThe corresponding post-hoc test for all pairwise comparison can be performed as follows:\n\n\nCode\nbma$friedman_posthoc()\n\n\n\n    Pairwise comparisons using Nemenyi-Wilcoxon-Wilcox all-pairs test for a two-way balanced complete block design\n\n\ndata: ibs and learner_id and task_id\n\n\n         cox  glmnet ranger aorsf\nglmnet   0.93 -      -      -    \nranger   0.63 0.98   -      -    \naorsf    0.75 0.27   0.07   -    \ncoxboost 0.86 0.37   0.12   1.00 \n\n\n\nP value adjustment method: single-step\n\n\nA visual approach is the critical difference plot, which shows a connecting line between the learners that are not statistically different from each other (as far as their average ranks are concerned).\n\n\nCode\nautoplot(bma, type = \"cd\", meas = \"ibs\", ratio = .7)\n\n\nWarning in geom_segment(aes(x = 0, xend = max(rank) + 1, y = 0, yend = 0)): All aesthetics have length 1, but the data has 5 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row."
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "Conclusion",
    "text": "Conclusion\nWe have conducted a tiny benchmark experiment on a few survival tasks using a few learners — a good starting point for further exploration! Advanced topics we did not cover in more detail include tuning and more advanced pipelines, but we hope you got a good overview of the capabilities of mlr3proba and mlr3 in general."
  },
  {
    "objectID": "index.html#session-info",
    "href": "index.html#session-info",
    "title": "Intro to Machine Learning for Survival Analysis with mlr3",
    "section": "Session Info",
    "text": "Session Info\n\n\nCode\nsessioninfo::session_info()\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       macOS Sonoma 14.5\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Vienna\n date     2024-07-07\n pandoc   3.2.1 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package           * version    date (UTC) lib source\n abind               1.4-5      2016-07-21 [1] CRAN (R 4.4.0)\n aorsf               0.1.5      2024-05-30 [1] CRAN (R 4.4.0)\n backports           1.5.0      2024-05-23 [1] CRAN (R 4.4.0)\n bbotk               1.0.0      2024-06-28 [1] CRAN (R 4.4.0)\n broom               1.0.6      2024-05-17 [1] CRAN (R 4.4.0)\n BWStest             0.2.3      2023-10-10 [1] CRAN (R 4.4.0)\n cachem              1.1.0      2024-05-16 [1] CRAN (R 4.4.0)\n car                 3.1-2      2023-03-30 [1] CRAN (R 4.4.0)\n carData             3.0-5      2022-01-06 [1] CRAN (R 4.4.0)\n checkmate           2.3.1      2023-12-04 [1] CRAN (R 4.4.0)\n class               7.3-22     2023-05-03 [2] CRAN (R 4.4.1)\n cli                 3.6.3      2024-06-21 [1] CRAN (R 4.4.0)\n clue                0.3-65     2023-09-23 [1] CRAN (R 4.4.0)\n cluster             2.1.6      2023-12-01 [2] CRAN (R 4.4.1)\n codetools           0.2-20     2024-03-31 [2] CRAN (R 4.4.1)\n collapse            2.0.14     2024-05-24 [1] CRAN (R 4.4.0)\n colorspace          2.1-0      2023-01-23 [1] CRAN (R 4.4.0)\n cowplot             1.1.3      2024-01-22 [1] CRAN (R 4.4.0)\n CoxBoost            1.5        2024-05-17 [1] Github (binderh/CoxBoost@1dc47d7)\n crayon              1.5.3      2024-06-20 [1] CRAN (R 4.4.0)\n data.table          1.15.4     2024-03-30 [1] CRAN (R 4.4.0)\n DEoptimR            1.1-3      2023-10-07 [1] CRAN (R 4.4.0)\n dictionar6          0.1.3      2021-09-13 [1] CRAN (R 4.4.0)\n digest              0.6.36     2024-06-23 [1] CRAN (R 4.4.0)\n diptest             0.77-1     2024-04-10 [1] CRAN (R 4.4.0)\n distr6              1.8.4      2024-05-07 [1] Github (xoopR/distr6@95d7359)\n dplyr               1.1.4      2023-11-17 [1] CRAN (R 4.4.0)\n evaluate            0.24.0     2024-06-10 [1] CRAN (R 4.4.0)\n fansi               1.0.6      2023-12-08 [1] CRAN (R 4.4.0)\n farver              2.1.2      2024-05-13 [1] CRAN (R 4.4.0)\n fastmap             1.2.0      2024-05-15 [1] CRAN (R 4.4.0)\n flexmix             2.3-19     2023-03-16 [1] CRAN (R 4.4.0)\n foreach             1.5.2      2022-02-02 [1] CRAN (R 4.4.0)\n fpc                 2.2-12     2024-04-30 [1] CRAN (R 4.4.0)\n future              1.33.2     2024-03-26 [1] CRAN (R 4.4.0)\n future.apply        1.11.2     2024-03-28 [1] CRAN (R 4.4.0)\n generics            0.1.3      2022-07-05 [1] CRAN (R 4.4.0)\n GGally              2.2.1      2024-02-14 [1] CRAN (R 4.4.0)\n ggplot2           * 3.5.1      2024-04-23 [1] CRAN (R 4.4.0)\n ggpubr              0.6.0      2023-02-10 [1] CRAN (R 4.4.0)\n ggsignif            0.6.4      2022-10-13 [1] CRAN (R 4.4.0)\n ggstats             0.6.0      2024-04-05 [1] CRAN (R 4.4.0)\n glmnet              4.1-8      2023-08-22 [1] CRAN (R 4.4.0)\n globals             0.16.3     2024-03-08 [1] CRAN (R 4.4.0)\n glue                1.7.0      2024-01-09 [1] CRAN (R 4.4.0)\n gmp                 0.7-4      2024-01-15 [1] CRAN (R 4.4.0)\n gridExtra           2.3        2017-09-09 [1] CRAN (R 4.4.0)\n gtable              0.3.5      2024-04-22 [1] CRAN (R 4.4.0)\n htmltools           0.5.8.1    2024-04-04 [1] CRAN (R 4.4.0)\n htmlwidgets         1.6.4      2023-12-06 [1] CRAN (R 4.4.0)\n iterators           1.0.14     2022-02-05 [1] CRAN (R 4.4.0)\n jsonlite            1.8.8      2023-12-04 [1] CRAN (R 4.4.0)\n kernlab             0.9-32     2023-01-31 [1] CRAN (R 4.4.0)\n km.ci               0.5-6      2022-04-06 [1] CRAN (R 4.4.0)\n KMsurv              0.1-5      2012-12-03 [1] CRAN (R 4.4.0)\n knitr               1.47       2024-05-29 [1] CRAN (R 4.4.0)\n kSamples            1.2-10     2023-10-07 [1] CRAN (R 4.4.0)\n labeling            0.4.3      2023-08-29 [1] CRAN (R 4.4.0)\n lattice             0.22-6     2024-03-20 [2] CRAN (R 4.4.1)\n lava                1.8.0      2024-03-05 [1] CRAN (R 4.4.0)\n lgr                 0.4.4      2022-09-05 [1] CRAN (R 4.4.0)\n lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.4.0)\n listenv             0.9.1      2024-01-29 [1] CRAN (R 4.4.0)\n magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.4.0)\n MASS                7.3-61     2024-06-13 [1] CRAN (R 4.4.0)\n Matrix            * 1.7-0      2024-04-26 [2] CRAN (R 4.4.1)\n mclust              6.1.1      2024-04-29 [1] CRAN (R 4.4.0)\n memoise             2.0.1      2021-11-26 [1] CRAN (R 4.4.0)\n mlr3              * 0.20.0     2024-06-28 [1] CRAN (R 4.4.0)\n mlr3benchmark     * 0.1.6      2023-05-30 [1] CRAN (R 4.4.0)\n mlr3cluster         0.1.9      2024-03-18 [1] CRAN (R 4.4.0)\n mlr3data            0.7.0      2023-06-29 [1] CRAN (R 4.4.0)\n mlr3extralearners   0.8.0-9000 2024-07-02 [1] Github (mlr-org/mlr3extralearners@79220c5)\n mlr3filters         0.8.0      2024-04-10 [1] CRAN (R 4.4.0)\n mlr3fselect         1.0.0      2024-06-29 [1] CRAN (R 4.4.0)\n mlr3hyperband       0.6.0      2024-06-29 [1] CRAN (R 4.4.0)\n mlr3learners        0.7.0      2024-06-28 [1] CRAN (R 4.4.0)\n mlr3mbo             0.2.3      2024-07-01 [1] CRAN (R 4.4.0)\n mlr3measures        0.5.0      2022-08-05 [1] CRAN (R 4.4.0)\n mlr3misc            0.15.1     2024-06-24 [1] CRAN (R 4.4.0)\n mlr3pipelines       0.6.0      2024-07-01 [1] CRAN (R 4.4.0)\n mlr3proba         * 0.6.3      2024-07-03 [1] Github (mlr-org/mlr3proba@dcd4b62)\n mlr3tuning          1.0.0      2024-06-29 [1] CRAN (R 4.4.0)\n mlr3tuningspaces    0.5.1.9000 2024-07-03 [1] local\n mlr3verse         * 0.3.0      2024-06-30 [1] CRAN (R 4.4.0)\n mlr3viz             0.9.0.9000 2024-07-03 [1] Github (mlr-org/mlr3viz@aa8a86a)\n modeltools          0.2-23     2020-03-05 [1] CRAN (R 4.4.0)\n multcompView        0.1-10     2024-03-08 [1] CRAN (R 4.4.0)\n munsell             0.5.1      2024-04-01 [1] CRAN (R 4.4.0)\n mvtnorm             1.2-5      2024-05-21 [1] CRAN (R 4.4.0)\n nnet                7.3-19     2023-05-03 [2] CRAN (R 4.4.1)\n ooplah              0.2.0      2022-01-21 [1] CRAN (R 4.4.0)\n palmerpenguins      0.1.1      2022-08-15 [1] CRAN (R 4.4.0)\n paradox             1.0.0      2024-06-11 [1] CRAN (R 4.4.0)\n parallelly          1.37.1     2024-02-29 [1] CRAN (R 4.4.0)\n param6              0.2.4      2024-04-26 [1] Github (xoopR/param6@0fa3577)\n pillar              1.9.0      2023-03-22 [1] CRAN (R 4.4.0)\n pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.4.0)\n plyr                1.8.9      2023-10-02 [1] CRAN (R 4.4.0)\n PMCMRplus           1.9.10     2023-12-10 [1] CRAN (R 4.4.0)\n prabclus            2.3-3      2023-10-24 [1] CRAN (R 4.4.0)\n pracma              2.4.4      2023-11-10 [1] CRAN (R 4.4.0)\n prodlim           * 2024.06.25 2024-06-24 [1] CRAN (R 4.4.0)\n purrr               1.0.2      2023-08-10 [1] CRAN (R 4.4.0)\n R.cache             0.16.0     2022-07-21 [1] CRAN (R 4.4.0)\n R.methodsS3         1.8.2      2022-06-13 [1] CRAN (R 4.4.0)\n R.oo                1.26.0     2024-01-24 [1] CRAN (R 4.4.0)\n R.utils             2.12.3     2023-11-18 [1] CRAN (R 4.4.0)\n R6                  2.5.1      2021-08-19 [1] CRAN (R 4.4.0)\n ranger              0.16.0     2023-11-12 [1] CRAN (R 4.4.0)\n RColorBrewer        1.1-3      2022-04-03 [1] CRAN (R 4.4.0)\n Rcpp                1.0.12     2024-01-09 [1] CRAN (R 4.4.0)\n RhpcBLASctl         0.23-42    2023-02-11 [1] CRAN (R 4.4.0)\n rlang               1.1.4      2024-06-04 [1] CRAN (R 4.4.0)\n rmarkdown           2.27       2024-05-17 [1] CRAN (R 4.4.0)\n Rmpfr               0.9-5      2024-01-21 [1] CRAN (R 4.4.0)\n robustbase          0.99-3     2024-07-01 [1] CRAN (R 4.4.0)\n rstatix             0.7.2      2023-02-01 [1] CRAN (R 4.4.0)\n scales              1.3.0      2023-11-28 [1] CRAN (R 4.4.0)\n sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.4.0)\n set6                0.2.6      2024-04-26 [1] Github (xoopR/set6@a901255)\n shape               1.4.6.1    2024-02-23 [1] CRAN (R 4.4.0)\n spacefillr          0.3.3      2024-05-22 [1] CRAN (R 4.4.0)\n stringi             1.8.4      2024-05-06 [1] CRAN (R 4.4.0)\n stringr             1.5.1      2023-11-14 [1] CRAN (R 4.4.0)\n styler              1.10.3     2024-04-07 [1] CRAN (R 4.4.0)\n styler.mlr          0.1.0      2024-05-16 [1] Github (mlr-org/styler.mlr@8a86087)\n SuppDists           1.1-9.7    2022-01-03 [1] CRAN (R 4.4.0)\n survival          * 3.7-0      2024-06-05 [1] CRAN (R 4.4.0)\n survivalmodels      0.1.191    2024-03-19 [1] CRAN (R 4.4.0)\n survminer           0.4.9      2021-03-09 [1] CRAN (R 4.4.0)\n survMisc            0.5.6      2022-04-07 [1] CRAN (R 4.4.0)\n tibble              3.2.1      2023-03-20 [1] CRAN (R 4.4.0)\n tidyr               1.3.1      2024-01-24 [1] CRAN (R 4.4.0)\n tidyselect          1.2.1      2024-03-11 [1] CRAN (R 4.4.0)\n utf8                1.2.4      2023-10-22 [1] CRAN (R 4.4.0)\n uuid                1.2-0      2024-01-14 [1] CRAN (R 4.4.0)\n vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.4.0)\n withr               3.0.0      2024-01-16 [1] CRAN (R 4.4.0)\n xfun                0.45       2024-06-16 [1] CRAN (R 4.4.0)\n xtable              1.8-4      2019-04-21 [1] CRAN (R 4.4.0)\n yaml                2.3.9      2024-07-05 [1] CRAN (R 4.4.0)\n zoo                 1.8-12     2023-04-13 [1] CRAN (R 4.4.0)\n\n [1] /Users/Lukas/Library/R/arm64/4.4/library\n [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────"
  }
]